.type Node <: symbol
.type Vote <: symbol
.type State <: symbol
.type InstanceId <: number

.decl Peers(x:Node, y:Node)
.input Peers
// Peers("coordinator", "a").
// Peers("coordinator", "b").
// Peers("coordinator", "c").

.decl vote(x:Node, tid:InstanceId, y:Node, v: Vote)
.input vote

.decl peer_cnt(x:Node, c:number)
peer_cnt("coordinator", c) :- c = count: Peers("coordinator", _).

.output peer_cnt

.decl yes_cnt(x:Node, tid:InstanceId, c:number)
yes_cnt("coordinator", txnid, c) :- vote("coordinator", txnid, _, "Yes"),
                      c = count : vote("coordinator", txnid, _, "Yes").

.output yes_cnt

.decl transaction(x: Node, tid:InstanceId, s:State)
.input transaction

.decl tick(x: Node, tid: InstanceId, c: number)
.input tick

.decl new_transaction(x: Node, tid:InstanceId, s:State)
// abort if one of the member votes "No"
new_transaction("coordinator", tid, "abort") :-
     transaction("coordinator", tid, "prepare"),
     vote("coordinator", tid, _, "No").

new_transaction("coordinator", tid, "commit") :-
     transaction("coordinator", tid, "prepare"),
     peer_cnt("coordinator", c),
     yes_cnt("coordinator", tid, c).

// time-out based abortion
new_transaction("coordinator", tid, "abort") :- 
    transaction("coordinator", tid, "prepare"),
    tick("coordinator", tid, c), c > 10.
    
.output new_transaction

// manage timer
.decl ticker()
.decl new_tick(x: Node, tid: InstanceId, c: number)

.input ticker

new_tick("coordinator", tid, 0) :- ticker(), 
    transaction("coordinator", tid, "prepare"),
    !tick("coordinator", tid, _).

new_tick("coordinator", tid, c+1) :- ticker(), tick("coordinator", tid, c).

.output new_tick
