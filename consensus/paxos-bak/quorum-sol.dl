.type Node <: symbol
.type Vote <: symbol
.type State <: symbol
.type View <: number
.type InstanceId <: number

.decl parliament(x: Node, y:Node, i:InstanceId)
.input parliament

.decl promise(x: Node, v: View, y:Node, i:InstanceId)
.input promise

.decl peer_cnt(x: Node, c: number, i:InstanceId)
peer_cnt(x, ac, i) :- parliament(x,_, i),ac = count: parliament(x, _, i).

.decl promise_cnt(x: Node, v: View, c: number, i:InstanceId)
promise_cnt(x, view, pc, i) :- promise(x, view, _, i),
                                  pc = count: promise(x, view, _, i).
.output promise_cnt

.decl quorum(x: Node, v:View, i:InstanceId)
quorum(x, view, i) :- promise(x, view, _, i),
                        promise_cnt(x, view, pc, i),
                        peer_cnt(x, ac, i),
                        pc > ac / 2.
.output quorum
