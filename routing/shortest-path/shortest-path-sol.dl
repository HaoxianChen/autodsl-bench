.type Node <: symbol
.type NodeList  <: symbol
.type Cost <: number
.type InstanceId <: number

.decl Link(x: Node, y: Node, cost: Cost, i: InstanceId)
.input Link

.decl Path(x: Node, y: Node, path: NodeList, cost: Cost, i: InstanceId)
Path(x,y,p,c,i) :- Link(x,y,c,i), p=cat(x,y).
Path(x,y,p,c,i) :- Link(x,z,c1,i), Path(z,y,p1,c2,i) , 
                    p=cat(x,p1), !contains(as(x,symbol),as(p1,symbol)),
                    c=c1+c2.

// .output Path

.decl minCost(x: Node, y: Node, cost: Cost, i: InstanceId)
minCost(x,y,mc,i) :- Path(x,y,_,_,i),  mc = min c : Path(x,y,_,c,i).

.decl bestPath(x: Node, y:Node, path: NodeList, cost: Cost, i: InstanceId)
// bestPath(x,y,p,mc) :- Path(x,y,p,mc), mc = min c : Path(x,y,_,c).
bestPath(x,y,p,mc,i) :- Path(x,y,p,mc,i), minCost(x,y,mc,i).

// .output minCost
.output bestPath
