.type Node <: symbol
.type Interface <: number
.type Cost <: number
.type Network <: symbol
.type NodeList <: symbol
.type InstanceId <: number

.decl Neighbor(x: Node, y: Node, cost: Cost, i:InstanceId)
.decl ConnectedRoute(x: Node, net: Network, path: NodeList, cost: Cost, i:InstanceId)
.decl Route(x: Node, net: Network, path: NodeList, cost: Cost, i:InstanceId)
.decl minCost(x: Node, net: Network, cost: Cost, i:InstanceId)
.decl BestRoute(x: Node, net: Network, path: NodeList, cost: Cost, i:InstanceId)

.input Neighbor
.input ConnectedRoute

Route(node,network,path,cost,i) :-
  Neighbor(node, nextHop, cost1,i),
  ConnectedRoute(nextHop, network, path2, cost2,i),
  cost = cost1 + cost2,
  path = cat(node, path2).

minCost(node, network, mc,i) :- Route(node, network, _, _,i), 
  mc = min c: Route(node, network, _, c,i).
BestRoute(node,network,nextHop,mc,i) :- Route(node,network,nextHop,mc,i),
  minCost(node, network, mc,i).

.output BestRoute
