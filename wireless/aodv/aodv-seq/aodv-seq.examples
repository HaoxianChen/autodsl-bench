Static {
    this(2),
    initHops(0),
    seqno(1),
    infinity(15),
    defaultTimeOut(15)
}

Examples {
    /*************** Handeling route requests ***********/
    // 1 No matching route to the destination 8

   // 2 Has a route to destiantion 8, but seq smaller than requested. 

   // 3a Has a route to destiantion 8, the same seq, 
   // send reply. 

    /* 3b Has a route to destiantion 8, with bigger seq, 
        send reply. 
    */

    // 4 This is the destination, send reply

    // 5 Update route to source
    // 5a there is no route to source at all
    // 5c the route to source has the same seq, 
    // fewer hops, don't update

    // 5d the route to source has the same seq, 
    // more hops,  update

    /*************** Handeling route replies ***********/

    // 6 send it to the originator

    // 7a update the route to destination, 
    // when no route at all

    // 7b update the route to destination, 
    // when existing route has smaller seq

    // 7c don't update the route to destination, 
    // when existing route has larger seq

    // 7d don't update the route to destination, 
    // when existing route has the smae seq, 
    // but fewer hops

    // 7e update the route to destination, 
    // when existing route has the smae seq, 
    // but more hops


    /*************** Maintain sequence number ***********/

    // 8a increment sequence number when a link is broken
    input {
        broken(9)
    }
    output {
        newSeq(4)
    }

    // 8b When receive a request with destination is t,
    // and seq greater than itself.
    input {
        //from,hops,dest,seq,source
        recvRREQ(7,3,2,5,1)
    }
    output {
        newSeq(5)
    }

    // 8c do not increment if the request destination is
    // not itself
    input {
        //from,hops,dest,seq,source
        recvRREQ(7,3,4,5,1)
    }
    output {
    }

    // 8d do not increment if the request destination is
    // itself, but sequence number is smaller
    input {
        //from,hops,dest,seq,source
        recvRREQ(7,3,2,0,1)
    }
    output {
    }

    /*************** Handeling incoming packet *******/

    // 9 updaet precursor list when receive a packet
    input {
        // from,source,dest
        recvPacket(3,1,8)
    }
    output {
        newPrecursor(3,1)
    }
    
    /*************** Handeling broken link *******/
    input {
        broken(4),
        // d,next,hops,seq,lifetime
        route(1,5,3,1,3),
        route(3,6,2,3,4),
        route(7,8,1,4,5),
        route(9,4,1,4,5),
        precursor(9,11),
        precursor(9,12),
        precursor(7,13)
    }
    output {
        sendRREP(11,9,15,5,15),
        sendRREP(12,9,15,5,15)
    }
}